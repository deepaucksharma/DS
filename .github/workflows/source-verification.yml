name: Source Verification

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:
    inputs:
      sources:
        description: 'Specific sources to verify (comma-separated)'
        required: false
        type: string

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r scripts/requirements-discovery.txt

      - name: Verify sources
        run: |
          echo "Verifying sources..."

          SOURCES_ARG=""
          if [ -n "${{ github.event.inputs.sources }}" ]; then
            IFS=',' read -ra SOURCES <<< "${{ github.event.inputs.sources }}"
            SOURCES_ARG="--sources ${SOURCES[@]}"
          fi

          python scripts/verify_sources.py \
            --config data/sources/registry.yaml \
            --output verification_results.json \
            $SOURCES_ARG \
            --verbose

      - name: Check for issues
        id: check
        run: |
          python -c "
          import json

          with open('verification_results.json') as f:
              results = json.load(f)

          summary = results['summary']
          issues = []

          # Check accessibility rate
          if summary['accessibility_rate'] < 0.9:
              issues.append(f'Low accessibility rate: {summary[\"accessibility_rate\"]:.1%}')

          # Check validity rate
          if summary['validity_rate'] < 0.8:
              issues.append(f'Low validity rate: {summary[\"validity_rate\"]:.1%}')

          # Check response time
          if summary['avg_response_time'] > 10:
              issues.append(f'High response time: {summary[\"avg_response_time\"]:.1f}s')

          # Count broken sources
          broken_sources = []
          for result in results['detailed_results']:
              if not result['accessible'] or not result['feed_valid']:
                  broken_sources.append(f'{result[\"source_id\"]}: {result[\"feed_url\"]}')

          if broken_sources:
              issues.append(f'Broken sources ({len(broken_sources)}): ' + ', '.join(broken_sources[:5]))

          if issues:
              print('ISSUES_FOUND=true')
              print('ISSUES=' + ' | '.join(issues))
          else:
              print('ISSUES_FOUND=false')
              print('All sources verified successfully')
          " | tee -a $GITHUB_OUTPUT

      - name: Create issue for broken sources
        if: steps.check.outputs.ISSUES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('verification_results.json', 'utf8'));

            const brokenSources = results.detailed_results
              .filter(r => !r.accessible || !r.feed_valid)
              .map(r => `- **${r.source_id}**: ${r.feed_url} - ${r.error || 'Invalid feed'}`)
              .join('\n');

            const issueBody = `## Source Verification Issues

            **Date:** ${new Date().toISOString()}
            **Run:** ${{ github.run_id }}

            ### Summary
            - Total feeds: ${results.summary.total_feeds}
            - Accessible: ${results.summary.accessible} (${(results.summary.accessibility_rate * 100).toFixed(1)}%)
            - Valid: ${results.summary.valid_feeds} (${(results.summary.validity_rate * 100).toFixed(1)}%)

            ### Broken Sources
            ${brokenSources}

            ### Action Required
            - [ ] Investigate broken sources
            - [ ] Update or remove invalid feeds
            - [ ] Test fixes
            - [ ] Update source registry

            ### Verification Results
            See workflow artifacts for detailed verification results.
            `;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'source-verification,needs-attention'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Source Verification Issues')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Updated Verification Results\n\n${issueBody}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Source Verification Issues - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['source-verification', 'needs-attention', 'maintenance']
              });
            }

      - name: Upload verification results
        uses: actions/upload-artifact@v4
        with:
          name: verification-results-${{ github.run_id }}
          path: verification_results.json
          retention-days: 90